import Head from "next/head";
import { type NextPage, type GetServerSideProps } from "next";
import axios from "axios";
import { type ScoredVector } from "@pinecone-database/pinecone";

import tw from "tailwind-styled-components";
import Header from "../components/Header";
import Footer from "../components/Footer";
import Content from "../components/Content";

export interface QueryVector {
  vector: number[];
  text: string;
}

export interface ContentProps {
  dataVectorArr: number[][];
  vectors: ScoredVector[];
  tempQueryVector: QueryVector;
}

const Home: NextPage<ContentProps> = ({
  vectors,
  dataVectorArr,
  tempQueryVector,
}) => {
  return (
    <>
      <Head>
        <title>Isomorphic</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Header />
        <MainTitle>Superpower your embeddings</MainTitle>
        <Content
          vectors={vectors}
          dataVectorArr={dataVectorArr}
          tempQueryVector={tempQueryVector}
        />
        <Footer />
      </Main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const baseUrl =
    process.env.NODE_ENV === "production"
      ? "https://isomorphic-alpha.vercel.app"
      : "http://localhost:3000";

  const randomStringToEmbed = "How was your day yesterday?";

  const embeddedString = await axios.post(`${baseUrl}/api/openai/embed`, {
    texts: [randomStringToEmbed],
  });

  const vector: number[] = embeddedString.data.vectors[0];

  // Make your POST request
  const res = await axios.post(`${baseUrl}/api/pinecone/query`, {
    apiKey: process.env.PINECONE_API_KEY,
    environment: process.env.PINECONE_ENV,
    vector,
    indexName: process.env.PINECONE_INDEX_NAME,
  });

  // Check for errors
  if (res.status !== 200) {
    throw new Error(res.statusText);
  }

  // Extract the query data from the response
  const { vectorMatches, dataVectorArr } = res.data;

  const reduction = process.env.REDUCTION_FUNCTION_URL as string;

  const reducedVectors = await axios.post(reduction, {
    data: [vector, ...dataVectorArr],
  });

  const reducedData = JSON.parse(reducedVectors.data.body);
  const firstVector = reducedData.shift();

  // Return the queryData as a prop
  return {
    props: {
      dataVectorArr: reducedData,
      vectors: vectorMatches,
      tempQueryVector: { vector: firstVector, text: randomStringToEmbed },
    },
  };
};

export default Home;

const Main = tw.main`
  flex 
  min-h-screen 
  flex-col
  bg-gradient-to-b 
  from-[#000000] 
  to-[#120F42]
`;

const MainTitle = tw.h1`
    text-2xl
    text-white
    font-bold
    mb-12
    text-center
    w-full
`;
